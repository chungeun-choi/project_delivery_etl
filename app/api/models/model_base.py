from datetime import datetime
from typing import Optional
import orjson
from sqlmodel import SQLModel
from zoneinfo import ZoneInfo
from sqlalchemy import BigInteger, TIMESTAMP, func
from sqlmodel import Column, Field, SQLModel


def orjson_dumps(v, *, default):
    return orjson.dumps(v, default=default).decode()


def datetime_convert(dt: datetime) -> str:
    if not dt.tzinfo:
        dt = dt.replace(tzinfo=ZoneInfo("UTC"))

    return datetime.astimezone(dt).strftime("%Y-%m-%d %H:%M:%S %z")


class ModelBase(SQLModel):
    class Config:
        json_loads = orjson.loads
        json_dumps = orjson_dumps
        json_encoders = {
            datetime: datetime_convert
        }  # method for customer JSON encoding of datetime fields

    # why Optional? The id will be required in the database, but it will be generated by the database, not by our code.
    id: Optional[int] = Field(
        default=None, sa_column=Column(BigInteger, primary_key=True, autoincrement=True)
    )
    # datetime column type 은 Datetime 아닌 TIMESTAMP 로 지정 - Can't subtract offset-naive and offset-aware datetimes 오류 방지
    # https://github.com/MagicStack/asyncpg/issues/791
    created_at: Optional[datetime] = Field(
        default=None,
        sa_column=Column(
            type_=TIMESTAMP(timezone=True),
            default=func.now(),
            server_default=func.now(),
            nullable=False,
        ),
    )

    updated_at: Optional[datetime] = Field(
        default=None,
        sa_column=Column(
            type_=TIMESTAMP(timezone=True),
            default=func.now(),
            server_default=func.now(),
            onupdate=func.now(),
            nullable=False,
        ),
    )
